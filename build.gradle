plugins {
    id 'org.springframework.boot' version '2.4.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly project(':graphql')
}

allprojects {
    group = 'com.dovendev'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '15'

    repositories {
        mavenCentral()
        jcenter()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'

    dependencies {
        testImplementation 'org.mockito:mockito-core:2.+'
    }

    afterEvaluate {
        compileJava {
            inputs.property('moduleName', moduleName)
            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                ]
                classpath = files()
            }
        }

        def patchArgs = "$moduleName=${tasks.compileJava.destinationDirectory.asFile.get().path}"

        compileTestJava {
            inputs.property('moduleName', moduleName)
            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                        '--patch-module', patchArgs
                ]
                classpath = files()
            }
        }

    }
}


allprojects {
    test {
        useJUnitPlatform()

        // Always run tests, even when nothing changed.
        dependsOn 'cleanTest'

        // Show test results.
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}
