scalar DateTime
scalar Duration

type Query {
    #track query
    getTrack(id: ID!): Track
    findAll: [Track!]!
    getAllPageable(first: Int!, after: ID): TrackConnection
    findByTitleDescription(searchText: String!): [Track!]!

    #link query
    getLink(id: ID!): Link
}

type Mutation {
    #track mutation
    createTrack(track: TrackInput!): Track!
    deleteTrack(id: ID!): Track

    #link mutation
    createLink(track: TrackInput!): Track!
    deleteLink(id: ID!): Track
}

input TrackInput {
    title: String!
    description: String
    length: Float
    time: Duration
    altitudeDifference: Int
    links: [LinkInput!]
}

type Link {
    id: ID!
    link: String!
    mainLink: Boolean
}

input LinkInput {
    link: String!
    mainLink: Boolean
}

type Track {
    id: ID!
    title: String!
    description: String
    length: Float
    time: Duration
    altitudeDifference: Int
    links: [Link!]!
    uploadTime: DateTime!
}

type TrackConnection {
    edges: [TrackEdge]
    pageInfo: PageInfo
}

type TrackEdge {
    cursor: ID!
    node: Track
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}